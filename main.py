from flask import Flask
from threading import Thread
import asyncio
from telethon import TelegramClient, events
from telethon.tl.types import DocumentAttributeSticker, InputStickerSetID

# Session file must be present
api_id = 22785739
api_hash = 'f96f6fc8bcbbe523dc93339fdd130b3c'

session_name = 'armored_user_session'  # Name of your saved .session file

target_username = 'Armoredb_user'
target_pack_id = 4798983069690233625
target_access_hash = -4231871290391784105

client = TelegramClient(session_name, api_id, api_hash)

# Flask dummy
app = Flask(__name__)

@app.route('/')
def home():
    return '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è!'

# –¢–µ–ª–µ–≥—Ä–∞–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@client.on(events.NewMessage(incoming=True))
async def handle(event):
    sender = await event.get_sender()
    if sender.username == target_username and event.sticker:
        for attr in event.document.attributes:
            if isinstance(attr, DocumentAttributeSticker):
                sticker_set = attr.stickerset
                if isinstance(sticker_set, InputStickerSetID):
                    if sticker_set.id == target_pack_id and sticker_set.access_hash == target_access_hash:
                        await event.delete()
                        print(f"‚úÖ –£–¥–∞–ª—ë–Ω —Å—Ç–∏–∫–µ—Ä –æ—Ç @{target_username}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
async def start_client():
    await client.start()
    print("üì° –¢–µ–ª–µ–≥—Ä–∞–º –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω...")
    await client.run_until_disconnected()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_telethon():
    asyncio.run(start_client())

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask
def run_flask():
    app.run(host="0.0.0.0", port=8080)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    # –°—Ç–∞—Ä—Ç—É–µ–º Telethon –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_telethon).start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
    run_flask()
