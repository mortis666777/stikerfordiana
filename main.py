import logging
from flask import Flask
from threading import Thread
import asyncio
from telethon import TelegramClient, events
from telethon.tl.types import DocumentAttributeSticker, InputStickerSetID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ 
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(message)s')
logger = logging.getLogger(__name__)

# –¢–µ–ª–µ–≥—Ä–∞–º API
api_id = 22785739
api_hash = 'f96f6fc8bcbbe523dc93339fdd130b3c'
client = TelegramClient('sticker_filter_session', api_id, api_hash)

# –¶–µ–ª—å
target_username = 'Sleep_paralycis'
target_pack_id = 4798983069690233625
target_access_hash = -4231871290391784105

# Flask-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def index():
    return 'üü¢ Telegram Sticker Remover is running!'

def run_flask():
    app.run(host="0.0.0.0", port=10000)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage(incoming=True))
async def handle(event):
    sender = await event.get_sender()

    if sender.username == target_username and event.sticker:
        for attr in event.document.attributes:
            if isinstance(attr, DocumentAttributeSticker):
                sticker_set = attr.stickerset
                if isinstance(sticker_set, InputStickerSetID):
                    if (sticker_set.id == target_pack_id and
                        sticker_set.access_hash == target_access_hash):
                        await event.delete()
                        logger.info(f"‚ùå –£–¥–∞–ª—ë–Ω —Å—Ç–∏–∫–µ—Ä –æ—Ç @{target_username} –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–∞–∫–∞.")
                        return  # –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_flask).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telethon
    async def main():
        await client.start()
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await client.run_until_disconnected()

    asyncio.run(main())
